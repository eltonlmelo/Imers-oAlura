{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[{"file_id":"16gwcNXDgKBFcg9Me8px_8DWnfKVdHLrE","timestamp":1747536545246}],"authorship_tag":"ABX9TyPGzgBCnNbo4Pz2KPhJuoM0"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","source":["!pip install google-generativeai\n","\n","import google.generativeai as genai\n","import textwrap\n","from IPython.display import Markdown\n","import getpass\n","\n","# Funções auxiliares básicas (serão completadas posteriormente)\n","def to_markdown(text):\n","    return Markdown(textwrap.indent(text, '> ', predicate=lambda _: True))\n","\n","def gerar_conteudo(prompt):\n","    # Será implementada após configuração da API\n","    pass\n","\n","def executar_teste(questoes):\n","    # Será implementada posteriormente\n","    pass"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"collapsed":true,"id":"zB8qbQKRsGbv","executionInfo":{"status":"ok","timestamp":1747531406141,"user_tz":180,"elapsed":3817,"user":{"displayName":"Elton Melo","userId":"09686717151626199122"}},"outputId":"cce2542b-929e-4b84-d0eb-68f1859fabf9"},"execution_count":57,"outputs":[{"output_type":"stream","name":"stdout","text":["Requirement already satisfied: google-generativeai in /usr/local/lib/python3.11/dist-packages (0.8.5)\n","Requirement already satisfied: google-ai-generativelanguage==0.6.15 in /usr/local/lib/python3.11/dist-packages (from google-generativeai) (0.6.15)\n","Requirement already satisfied: google-api-core in /usr/local/lib/python3.11/dist-packages (from google-generativeai) (2.24.2)\n","Requirement already satisfied: google-api-python-client in /usr/local/lib/python3.11/dist-packages (from google-generativeai) (2.169.0)\n","Requirement already satisfied: google-auth>=2.15.0 in /usr/local/lib/python3.11/dist-packages (from google-generativeai) (2.38.0)\n","Requirement already satisfied: protobuf in /usr/local/lib/python3.11/dist-packages (from google-generativeai) (5.29.4)\n","Requirement already satisfied: pydantic in /usr/local/lib/python3.11/dist-packages (from google-generativeai) (2.11.4)\n","Requirement already satisfied: tqdm in /usr/local/lib/python3.11/dist-packages (from google-generativeai) (4.67.1)\n","Requirement already satisfied: typing-extensions in /usr/local/lib/python3.11/dist-packages (from google-generativeai) (4.13.2)\n","Requirement already satisfied: proto-plus<2.0.0dev,>=1.22.3 in /usr/local/lib/python3.11/dist-packages (from google-ai-generativelanguage==0.6.15->google-generativeai) (1.26.1)\n","Requirement already satisfied: googleapis-common-protos<2.0.0,>=1.56.2 in /usr/local/lib/python3.11/dist-packages (from google-api-core->google-generativeai) (1.70.0)\n","Requirement already satisfied: requests<3.0.0,>=2.18.0 in /usr/local/lib/python3.11/dist-packages (from google-api-core->google-generativeai) (2.32.3)\n","Requirement already satisfied: cachetools<6.0,>=2.0.0 in /usr/local/lib/python3.11/dist-packages (from google-auth>=2.15.0->google-generativeai) (5.5.2)\n","Requirement already satisfied: pyasn1-modules>=0.2.1 in /usr/local/lib/python3.11/dist-packages (from google-auth>=2.15.0->google-generativeai) (0.4.2)\n","Requirement already satisfied: rsa<5,>=3.1.4 in /usr/local/lib/python3.11/dist-packages (from google-auth>=2.15.0->google-generativeai) (4.9.1)\n","Requirement already satisfied: httplib2<1.0.0,>=0.19.0 in /usr/local/lib/python3.11/dist-packages (from google-api-python-client->google-generativeai) (0.22.0)\n","Requirement already satisfied: google-auth-httplib2<1.0.0,>=0.2.0 in /usr/local/lib/python3.11/dist-packages (from google-api-python-client->google-generativeai) (0.2.0)\n","Requirement already satisfied: uritemplate<5,>=3.0.1 in /usr/local/lib/python3.11/dist-packages (from google-api-python-client->google-generativeai) (4.1.1)\n","Requirement already satisfied: annotated-types>=0.6.0 in /usr/local/lib/python3.11/dist-packages (from pydantic->google-generativeai) (0.7.0)\n","Requirement already satisfied: pydantic-core==2.33.2 in /usr/local/lib/python3.11/dist-packages (from pydantic->google-generativeai) (2.33.2)\n","Requirement already satisfied: typing-inspection>=0.4.0 in /usr/local/lib/python3.11/dist-packages (from pydantic->google-generativeai) (0.4.0)\n","Requirement already satisfied: grpcio<2.0dev,>=1.33.2 in /usr/local/lib/python3.11/dist-packages (from google-api-core[grpc]!=2.0.*,!=2.1.*,!=2.10.*,!=2.2.*,!=2.3.*,!=2.4.*,!=2.5.*,!=2.6.*,!=2.7.*,!=2.8.*,!=2.9.*,<3.0.0dev,>=1.34.1->google-ai-generativelanguage==0.6.15->google-generativeai) (1.71.0)\n","Requirement already satisfied: grpcio-status<2.0.dev0,>=1.33.2 in /usr/local/lib/python3.11/dist-packages (from google-api-core[grpc]!=2.0.*,!=2.1.*,!=2.10.*,!=2.2.*,!=2.3.*,!=2.4.*,!=2.5.*,!=2.6.*,!=2.7.*,!=2.8.*,!=2.9.*,<3.0.0dev,>=1.34.1->google-ai-generativelanguage==0.6.15->google-generativeai) (1.71.0)\n","Requirement already satisfied: pyparsing!=3.0.0,!=3.0.1,!=3.0.2,!=3.0.3,<4,>=2.4.2 in /usr/local/lib/python3.11/dist-packages (from httplib2<1.0.0,>=0.19.0->google-api-python-client->google-generativeai) (3.2.3)\n","Requirement already satisfied: pyasn1<0.7.0,>=0.6.1 in /usr/local/lib/python3.11/dist-packages (from pyasn1-modules>=0.2.1->google-auth>=2.15.0->google-generativeai) (0.6.1)\n","Requirement already satisfied: charset-normalizer<4,>=2 in /usr/local/lib/python3.11/dist-packages (from requests<3.0.0,>=2.18.0->google-api-core->google-generativeai) (3.4.2)\n","Requirement already satisfied: idna<4,>=2.5 in /usr/local/lib/python3.11/dist-packages (from requests<3.0.0,>=2.18.0->google-api-core->google-generativeai) (3.10)\n","Requirement already satisfied: urllib3<3,>=1.21.1 in /usr/local/lib/python3.11/dist-packages (from requests<3.0.0,>=2.18.0->google-api-core->google-generativeai) (2.4.0)\n","Requirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.11/dist-packages (from requests<3.0.0,>=2.18.0->google-api-core->google-generativeai) (2025.4.26)\n"]}]},{"cell_type":"code","source":["# Configura a API Key do Google Gemini\n","\n","import os\n","from google.colab import userdata\n","\n","os.environ[\"GOOGLE_API_KEY\"] = userdata.get('GOOGLE_API_KEY')"],"metadata":{"id":"JUi9YIOx3j5y","executionInfo":{"status":"ok","timestamp":1747531408521,"user_tz":180,"elapsed":962,"user":{"displayName":"Elton Melo","userId":"09686717151626199122"}}},"execution_count":58,"outputs":[]},{"cell_type":"code","source":["import google.generativeai as genai\n","\n","# Carrega a chave de API da variável de ambiente\n","api_key = os.environ.get(\"GOOGLE_API_KEY\")\n","\n","# Configura a chave de API para a biblioteca genai\n","genai.configure(api_key=api_key)\n","\n","# Define o ID do modelo que você quer usar\n","MODEL_ID = \"gemini-2.0-flash\"\n","\n","tools_config = [\n","    {\n","        \"name\":\"google_search\"\n","    }\n","]\n","\n","# Instancia o modelo generativo com a congiguração de ferramentas\n","model = genai.GenerativeModel(MODEL_ID, tools=tools_config)\n","\n","print(f\"Modelo inicializado com suporte a ferramentas.\" )"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"3e-_piUWLu-P","executionInfo":{"status":"ok","timestamp":1747534678884,"user_tz":180,"elapsed":9,"user":{"displayName":"Elton Melo","userId":"09686717151626199122"}},"outputId":"1e871581-ffc6-44bd-80fd-0c54ce0b0f68"},"execution_count":76,"outputs":[{"output_type":"stream","name":"stdout","text":["Modelo inicializado com suporte a ferramentas.\n"]}]},{"cell_type":"code","source":["# ==============================================\n","# BLOCO COMPLETO PARA INSERIR APÓS A CONFIGURAÇÃO DO MODELO\n","# ==============================================\n","\n","import re\n","import textwrap\n","\n","### FUNÇÕES AUXILIARES ###\n","def coletar_preferencias_usuario():\n","    print(\"\\n\" + \"=\"*50)\n","    assunto = input(\"Sobre qual assunto você deseja estudar? \").strip()\n","\n","    # Seleção de profundidade\n","    print(\"\\nNíveis de profundidade:\")\n","    print(\"1. Superficial (conceitos básicos)\")\n","    print(\"2. Normal (explicação com exemplos)\")\n","    print(\"3. Detalhada (aprofundada com nuances)\")\n","    print(\"4. Técnica (termos específicos e detalhes)\")\n","\n","    while True:\n","        escolha = input(\"Escolha o nível (1-4): \").strip()\n","        if escolha in ['1', '2', '3', '4']:\n","            niveis_profundidade = {\n","                '1': 'superficial',\n","                '2': 'normal',\n","                '3': 'detalhada',\n","                '4': 'técnica'\n","            }\n","            profundidade = niveis_profundidade[escolha]\n","            break\n","        print(\"Opção inválida!\")\n","\n","    # Seleção de conhecimento\n","    print(\"\\nNíveis de conhecimento:\")\n","    print(\"1. Nenhum conhecimento\")\n","    print(\"2. Iniciante\")\n","    print(\"3. Básico\")\n","    print(\"4. Intermediário\")\n","    print(\"5. Avançado\")\n","    print(\"6. Especialista\")\n","\n","    while True:\n","        escolha = input(\"Selecione seu nível (1-6): \").strip()\n","        if escolha in ['1', '2', '3', '4', '5', '6']:\n","            niveis_conhecimento = {\n","                '1': 'nenhum conhecimento',\n","                '2': 'iniciante',\n","                '3': 'básico',\n","                '4': 'intermediário',\n","                '5': 'avançado',\n","                '6': 'especialista'\n","            }\n","            conhecimento = niveis_conhecimento[escolha]\n","            break\n","        print(\"Opção inválida!\")\n","\n","    return assunto, profundidade, conhecimento\n","\n","def parser_questoes(texto):\n","    blocos = re.findall(r'\\[INÍCIO QUESTÃO\\](.*?)\\[FIM QUESTÃO\\]', texto, re.DOTALL)\n","    questoes = []\n","\n","    for bloco in blocos:\n","        questao = {\n","            'pergunta': '',\n","            'opcoes': [],\n","            'resposta': ''\n","        }\n","\n","        linhas = [linha.strip() for linha in bloco.split('\\n') if linha.strip()]\n","        for linha in linhas:\n","            if linha.startswith('Pergunta:'):\n","                questao['pergunta'] = linha.split(':', 1)[-1].strip()\n","            elif re.match(r'^[a-d]\\)', linha):\n","                questao['opcoes'].append(linha)\n","            elif 'Resposta Correta:' in linha:\n","                questao['resposta'] = linha.split(':')[-1].strip().lower()[0]\n","\n","        if questao['pergunta'] and questao['opcoes'] and questao['resposta']:\n","            questoes.append(questao)\n","\n","    return questoes[:5]\n","\n","def executar_teste(questoes):\n","    acertos = 0\n","    for i, questao in enumerate(questoes, 1):\n","        print(f\"\\nQuestão {i}: {questao['pergunta']}\")\n","        for opcao in questao['opcoes']:\n","            print(opcao)\n","\n","        while True:\n","            resposta = input(\"Sua resposta (a-d): \").lower().strip()\n","            if resposta in ['a', 'b', 'c', 'd']:\n","                if resposta == questao['resposta']:\n","                    acertos += 1\n","                break\n","            print(\"Resposta inválida!\")\n","    return acertos\n","\n","def gerar_teste_final(assunto, nivel):\n","    prompt = f\"\"\"Gere um teste final sobre {assunto} com:\n","    5 questões de múltipla escolha usando formato:\n","    [INICIO_QUESTAO]\n","    Pergunta: [texto]\n","    a) Opção A\n","    b) Opção B\n","    c) Opção C\n","    d) Opção D\n","    Resposta Correta: [letra]\n","    [FIM_QUESTAO]\n","    + 2 questões dissertativas. Formato exato:\n","\n","    [DISSERTATIVAS]\n","    1. [Pergunta 1]\n","    2. [Pergunta 2]\"\"\"\n","\n","    try:\n","        resposta = model.generate_content(prompt)\n","        return resposta.text\n","    except Exception as e:\n","        print(f\"Erro na geração: {str(e)}\")\n","        return \"\"\n","\n","def parser_questoes_final(texto):\n","    blocos = re.findall(r'\\[INICIO_QUESTAO\\](.*?)\\[FIM_QUESTAO\\]', texto, re.DOTALL)\n","    questoes = []\n","\n","    for bloco in blocos:\n","        questao = {\n","            'pergunta': '',\n","            'opcoes': [],\n","            'resposta': ''\n","        }\n","\n","        linhas = [linha.strip() for linha in bloco.split('\\n') if linha.strip()]\n","        for linha in linhas:\n","            if linha.startswith('Pergunta:'):\n","                questao['pergunta'] = linha.split(':', 1)[-1].strip()\n","            elif re.match(r'^[a-d]\\)', linha):\n","                questao['opcoes'].append(linha)\n","            elif 'Resposta Correta:' in linha:\n","                questao['resposta'] = linha.split(':')[-1].strip().lower()[0]\n","\n","        if questao['pergunta'] and len(questao['opcoes']) == 4 and questao['resposta']:\n","            questoes.append(questao)\n","\n","    return questoes[:5]\n","\n","def executar_teste_final(texto_teste):\n","    partes = texto_teste.split(\"[DISSERTATIVAS]\")\n","\n","    # Processa questões objetivas\n","    print(\"\\n\" + \"=\"*50)\n","    print(\"📝 TESTE FINAL - Parte Objetiva (5 questões)\")\n","    questoes_obj = parser_questoes_final(partes[0])\n","    acertos = executar_teste(questoes_obj) if questoes_obj else 0\n","\n","    # Processa questões dissertativas\n","    print(\"\\n\" + \"=\"*50)\n","    print(\"📝 TESTE FINAL - Parte Dissertativa (2 questões)\")\n","    dissertativas = [q.strip() for q in partes[1].split('\\n') if q.strip()][:2]\n","    respostas_dissertativas = []\n","\n","    for i, pergunta in enumerate(dissertativas, 1):\n","        print(f\"\\nPergunta {i + 5}: {pergunta}\")\n","        respostas_dissertativas.append(input(\"Sua resposta: \"))\n","\n","    return acertos, respostas_dissertativas\n","\n","def gerar_feedback(assunto, acertos, total, respostas_dissertativas):\n","    print(\"\\n\" + \"=\"*50)\n","    print(\"📊 FEEDBACK COMPLETO\")\n","    percentual = (acertos / total) * 100\n","    print(f\"\\n● Desempenho nas objetivas: {acertos}/{total} ({percentual:.1f}%)\")\n","\n","    if percentual < 60:\n","        print(\"\\n⚠️ Atenção aos seguintes conceitos:\")\n","        prompt = f\"Liste os 3 principais conceitos de {assunto} que precisam de revisão\"\n","        print(model.generate_content(prompt).text)\n","\n","    print(\"\\n🔍 Análise das respostas dissertativas:\")\n","    for i, resposta in enumerate(respostas_dissertativas, 1):\n","        prompt = f\"Avalie esta resposta sobre '{assunto}': {resposta}\\nDê feedback em 3 pontos\"\n","        print(f\"\\nPergunta {i + 5}:\")\n","        print(model.generate_content(prompt).text)\n","\n","### FLUXO PRINCIPAL ###\n","assunto, profundidade, conhecimento = coletar_preferencias_usuario()\n","nivel_sugerido = conhecimento\n","\n","# Teste diagnóstico\n","if conhecimento != \"nenhum conhecimento\" and profundidade in [\"normal\", \"detalhada\", \"técnica\"]:\n","    if input(\"\\nDeseja realizar um teste diagnóstico? (sim/não): \").lower() == \"sim\":\n","        while True:\n","            print(\"\\n🔍 Gerando teste diagnóstico...\")\n","            questoes = gerar_questoes(assunto, nivel_sugerido)\n","\n","            if not questoes:\n","                print(\"Não foi possível gerar questões válidas\")\n","                break\n","\n","            acertos = executar_teste(questoes)\n","            print(f\"\\nResultado: {acertos}/{len(questoes)} acertos\")\n","\n","            if acertos/len(questoes) >= 0.6:\n","                print(\"✅ Nível confirmado!\")\n","                break\n","            else:\n","                print(\"⚠️ Sugerimos ajustar o nível\")\n","                novos_niveis = [\"nenhum conhecimento\", \"iniciante\", \"básico\", \"intermediário\", \"avançado\", \"especialista\"]\n","                index_atual = novos_niveis.index(nivel_sugerido)\n","                novo_nivel = novos_niveis[max(0, index_atual-1)]\n","\n","                if input(f\"Deseja tentar com nível {novo_nivel}? (sim/não): \").lower() == 'sim':\n","                    nivel_sugerido = novo_nivel\n","                else:\n","                    break\n","\n","# Geração de conteúdo\n","print(\"\\n\" + \"=\"*50)\n","print(f\"Gerando conteúdo sobre {assunto}...\")\n","print(f\"► Nível: {nivel_sugerido.capitalize()}\")\n","print(f\"► Profundidade: {profundidade.capitalize()}\")\n","print(\"=\"*50)\n","\n","try:\n","    prompt_conteudo = f\"\"\"Crie um conteúdo sobre {assunto} com profundidade {profundidade}\n","    para nível {nivel_sugerido}. Formato: Tópicos organizados com exemplos práticos.\"\"\"\n","    conteudo = model.generate_content(prompt_conteudo)\n","    print(\"\\n\" + conteudo.text)\n","except Exception as e:\n","    print(f\"Erro na geração: {str(e)}\")\n","\n","# Teste final após conteúdo\n","if input(\"\\nDeseja realizar o teste final para verificar seu aprendizado? (sim/não): \").lower() == \"sim\":\n","    print(\"\\n\" + \"=\"*50)\n","    print(\"📘 TESTE FINAL - Verificação de Aprendizado\")\n","    teste_final = gerar_teste_final(assunto, nivel_sugerido)\n","\n","    if teste_final:\n","        acertos, dissertativas = executar_teste_final(teste_final)\n","        gerar_feedback(assunto, acertos, 5, dissertativas)\n","    else:\n","        print(\"Não foi possível gerar o teste final\")\n","\n","# Sistema de Q&A\n","print(\"\\n\" + \"=\"*50)\n","print(\"💬 Modo de Dúvidas (digite 'sair' para encerrar)\")\n","while True:\n","    duvida = input(\"\\nSua dúvida: \").strip()\n","    if duvida.lower() == 'sair':\n","        break\n","\n","    try:\n","        resposta = model.generate_content(f\"Explique sobre {assunto}: {duvida} para nível {nivel_sugerido}\")\n","        print(\"\\nResposta:\")\n","        print(textwrap.fill(resposta.text, width=80))\n","    except Exception as e:\n","        print(f\"Erro na resposta: {str(e)}\")\n","\n","print(\"\\nEstudo concluído! 🎓\")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":1000},"id":"fx9A0TXER6Gb","outputId":"cea0a817-79e4-4bc6-fbfc-40fdecb87745"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["\n","==================================================\n","Sobre qual assunto você deseja estudar? phyton\n","\n","Níveis de profundidade:\n","1. Superficial (conceitos básicos)\n","2. Normal (explicação com exemplos)\n","3. Detalhada (aprofundada com nuances)\n","4. Técnica (termos específicos e detalhes)\n","Escolha o nível (1-4): 4\n","\n","Níveis de conhecimento:\n","1. Nenhum conhecimento\n","2. Iniciante\n","3. Básico\n","4. Intermediário\n","5. Avançado\n","6. Especialista\n","Selecione seu nível (1-6): 6\n","\n","Deseja realizar um teste diagnóstico? (sim/não): não\n","\n","==================================================\n","Gerando conteúdo sobre phyton...\n","► Nível: Especialista\n","► Profundidade: Técnica\n","==================================================\n","\n","## Conteúdo Técnico Avançado sobre Python para Especialistas\n","\n","Este conteúdo aborda tópicos avançados em Python, com foco em detalhes técnicos e exemplos práticos para especialistas.\n","\n","**1. Metaclasses:**\n","\n","*   **Conceito:** Metaclasses são classes de classes. Elas controlam a criação de classes, permitindo personalização do processo de instanciação e definição de comportamentos específicos para todas as classes derivadas.\n","*   **Casos de Uso:**\n","    *   **Validação de atributos:** Garantir que todas as classes tenham determinados atributos ou que atributos sigam certas regras.\n","    *   **Implementação de Singletons:** Criar uma metaclasse que assegure que apenas uma instância da classe seja criada.\n","    *   **Registro automático de classes:** Registrar classes em um sistema ou banco de dados assim que são definidas.\n","    *   **Adaptação dinâmica de classes:** Modificar a estrutura de uma classe em tempo de execução, com base em configurações ou dados externos.\n","*   **Exemplo:**\n","\n","```python\n","class MetaSingleton(type):\n","    _instances = {}\n","    def __call__(cls, *args, **kwargs):\n","        if cls not in cls._instances:\n","            cls._instances[cls] = super(MetaSingleton, cls).__call__(*args, **kwargs)\n","        return cls._instances[cls]\n","\n","class MySingleton(metaclass=MetaSingleton):\n","    def __init__(self, valor):\n","        self.valor = valor\n","\n","# Testando o Singleton\n","a = MySingleton(10)\n","b = MySingleton(20)\n","\n","print(a.valor) # Saída: 10\n","print(b.valor) # Saída: 10\n","print(a is b)   # Saída: True\n","```\n","\n","**2. Gerenciadores de Contexto (Context Managers):**\n","\n","*   **Conceito:** Permitem a alocação e liberação de recursos (arquivos, conexões de banco de dados, etc.) de forma segura e elegante, garantindo que o código de \"cleanup\" seja sempre executado, mesmo em caso de exceções. Utilizam os métodos `__enter__` e `__exit__`.\n","*   **Casos de Uso:**\n","    *   **Gerenciamento de arquivos:** Abrir e fechar arquivos automaticamente.\n","    *   **Conexões de banco de dados:** Estabelecer e fechar conexões.\n","    *   **Locks e semáforos:** Adquirir e liberar locks em ambientes multithread.\n","    *   **Transações:** Iniciar e commitar/rollback transações.\n","*   **Exemplo:**\n","\n","```python\n","import threading\n","\n","class LockContext:\n","    def __init__(self, lock):\n","        self.lock = lock\n","\n","    def __enter__(self):\n","        self.lock.acquire()\n","        return self\n","\n","    def __exit__(self, exc_type, exc_val, exc_tb):\n","        self.lock.release()\n","\n","lock = threading.Lock()\n","\n","with LockContext(lock):\n","    # Código que precisa do lock\n","    print(\"Código executando com o lock adquirido\")\n","\n","# O lock é automaticamente liberado ao sair do bloco 'with'\n","```\n","\n","**3. Decoradores Avançados:**\n","\n","*   **Conceito:** Decoradores são funções que modificam o comportamento de outras funções ou métodos. Decoradores avançados podem usar `functools.wraps` para preservar metadados da função original, aceitar argumentos e implementar lógicas complexas.\n","*   **Casos de Uso:**\n","    *   **Caching:** Implementar caching de resultados de funções.\n","    *   **Logging:** Registrar chamadas de função e seus argumentos.\n","    *   **Controle de acesso:** Verificar permissões antes de executar uma função.\n","    *   **Retry:** Tentar executar uma função novamente em caso de falha.\n","*   **Exemplo:**\n","\n","```python\n","import functools\n","import time\n","\n","def retry(max_attempts, delay=1):\n","    def decorator_retry(func):\n","        @functools.wraps(func)\n","        def wrapper(*args, **kwargs):\n","            attempts = 0\n","            while attempts < max_attempts:\n","                try:\n","                    return func(*args, **kwargs)\n","                except Exception as e:\n","                    attempts += 1\n","                    print(f\"Tentativa {attempts} falhou: {e}\")\n","                    time.sleep(delay)\n","            print(f\"Falhou após {max_attempts} tentativas.\")\n","            raise\n","        return wrapper\n","    return decorator_retry\n","\n","@retry(max_attempts=3, delay=2)\n","def unreliable_function():\n","    import random\n","    if random.random() < 0.5:\n","        raise Exception(\"Função falhou!\")\n","    return \"Função executada com sucesso!\"\n","\n","print(unreliable_function())\n","```\n","\n","**4. Asyncio Avançado:**\n","\n","*   **Conceito:** `asyncio` é uma biblioteca para programação concorrente usando corrotinas. Tópicos avançados incluem criação de tasks, sincronização entre corrotinas, tratamento de exceções e uso de pools de execução.\n","*   **Casos de Uso:**\n","    *   **Web scraping:** Coletar dados de múltiplas páginas web simultaneamente.\n","    *   **Servidores assíncronos:** Criar servidores que podem lidar com muitas conexões simultâneas.\n","    *   **Processamento de dados:** Executar tarefas de processamento de dados em paralelo.\n","*   **Exemplo:**\n","\n","```python\n","import asyncio\n","\n","async def fetch_data(url):\n","    print(f\"Iniciando busca em {url}\")\n","    await asyncio.sleep(1)  # Simula uma operação de I/O demorada\n","    print(f\"Busca concluída em {url}\")\n","    return f\"Dados de {url}\"\n","\n","async def main():\n","    urls = [\"https://exemplo.com/1\", \"https://exemplo.com/2\", \"https://exemplo.com/3\"]\n","    tasks = [asyncio.create_task(fetch_data(url)) for url in urls]\n","    resultados = await asyncio.gather(*tasks)\n","    print(f\"Resultados: {resultados}\")\n","\n","if __name__ == \"__main__\":\n","    asyncio.run(main())\n","```\n","\n","**5. Generators e Corrotinas:**\n","\n","*   **Conceito:** Generators são funções que produzem uma sequência de valores usando a palavra-chave `yield`. Corrotinas são generators que podem receber valores usando `send()`, `throw()`, e `close()`, permitindo comunicação bidirecional e controle de fluxo mais sofisticado.\n","*   **Casos de Uso:**\n","    *   **Processamento de streams de dados:** Processar grandes volumes de dados sem carregar tudo na memória.\n","    *   **Implementação de iteradores personalizados:** Criar iteradores que geram valores sob demanda.\n","    *   **Concorrência cooperativa:** Implementar sistemas concorrentes sem threads.\n","*   **Exemplo:**\n","\n","```python\n","def corrotina_exemplo():\n","    print(\"Início da corrotina\")\n","    x = yield\n","    print(f\"Corrotina recebeu: {x}\")\n","    y = yield x * 2\n","    print(f\"Corrotina recebeu: {y}\")\n","    print(\"Fim da corrotina\")\n","\n","# Uso da corrotina\n","coro = corrotina_exemplo()\n","next(coro)  # Inicia a corrotina até o primeiro yield\n","print(coro.send(10)) # Envia o valor 10 e imprime o valor yieldado (10 * 2 = 20)\n","try:\n","    coro.send(20) # Envia o valor 20\n","except StopIteration:\n","    pass\n","```\n","\n","**6. Memória e Profiling:**\n","\n","*   **Conceito:** Entender como Python gerencia a memória (coleta de lixo, alocação de objetos) é crucial para otimizar o desempenho. Ferramentas de profiling ajudam a identificar gargalos de desempenho e uso excessivo de memória.\n","*   **Ferramentas:**\n","    *   `memory_profiler`:  Analisa o uso de memória linha a linha.\n","    *   `cProfile`:  Profiling de CPU para identificar as funções mais demoradas.\n","    *   `objgraph`:  Visualização do grafo de objetos para detectar vazamentos de memória.\n","*   **Estratégias:**\n","    *   **Uso de estruturas de dados eficientes:**  Utilizar `array` em vez de `list` para dados numéricos, `set` para busca rápida, etc.\n","    *   **Redução de cópias de dados:**  Utilizar `itertools`, `map`, `filter` para processamento preguiçoso.\n","    *   **Gerenciamento manual de memória:**  Em casos extremos, usar `ctypes` para alocar e liberar memória manualmente.\n","*   **Exemplo (memory_profiler):**\n","\n","```python\n","# Arquivo: memoria_exemplo.py\n","from memory_profiler import profile\n","\n","@profile\n","def minha_funcao():\n","    lista = [i for i in range(1000000)]\n","    return sum(lista)\n","\n","if __name__ == \"__main__\":\n","    minha_funcao()\n","```\n","\n","Para executar:\n","\n","```bash\n","python -m memory_profiler memoria_exemplo.py\n","```\n","\n","**7. Extensões C/C++:**\n","\n","*   **Conceito:**  Para tarefas computacionalmente intensivas, é possível escrever extensões em C/C++ e integrá-las ao Python. Isso permite aproveitar o desempenho superior dessas linguagens.\n","*   **Ferramentas:**\n","    *   `Cython`:  Linguagem que facilita a escrita de extensões C/C++ com sintaxe semelhante ao Python.\n","    *   `ctypes`:  Biblioteca para interagir com bibliotecas C/C++ dinamicamente.\n","    *   `SWIG`:  Gerador de wrappers para integrar código C/C++ a várias linguagens, incluindo Python.\n","*   **Exemplo (Cython):**\n","\n","```cython\n","# Arquivo: exemplo.pyx\n","def somar(int a, int b):\n","    return a + b\n","```\n","\n","Para compilar:\n","\n","```python\n","# Arquivo: setup.py\n","from setuptools import setup\n","from Cython.Build import cythonize\n","\n","setup(\n","    ext_modules = cythonize(\"exemplo.pyx\")\n",")\n","```\n","\n","```bash\n","python setup.py build_ext --inplace\n","```\n","\n","**8.  Meta-Programação com AST (Abstract Syntax Trees):**\n","\n","*   **Conceito:** A biblioteca `ast` permite analisar e modificar o código Python em tempo de execução, manipulando sua representação em árvore sintática abstrata.\n","*   **Casos de Uso:**\n","    *   **Análise estática de código:**  Detectar erros e padrões de código.\n","    *   **Transformação de código:**  Modificar o comportamento do código dinamicamente.\n","    *   **Geração de código:**  Criar código Python automaticamente.\n","*   **Exemplo:**\n","\n","```python\n","import ast\n","import astor\n","\n","# Código fonte\n","codigo = \"\"\"\n","def minha_funcao():\n","    x = 10\n","    print(x)\n","\"\"\"\n","\n","# Parse do código para uma árvore AST\n","arvore = ast.parse(codigo)\n","\n","# Modificação da árvore (exemplo: adicionar uma linha)\n","arvore.body[0].body.append(ast.Expr(value=ast.Call(func=ast.Name(id='print', ctx=ast.Load()), args=[ast.Constant(value='Adicionado!')], keywords=[])))\n","\n","\n","# Converter a árvore de volta para código fonte\n","novo_codigo = astor.to_source(arvore)\n","\n","print(novo_codigo)\n","# Saída:\n","# def minha_funcao():\n","#     x = 10\n","#     print(x)\n","#     print('Adicionado!')\n","```\n","\n","Este conteúdo oferece uma visão geral de tópicos avançados em Python. Para um estudo mais aprofundado, recomenda-se explorar a documentação oficial do Python e as bibliotecas mencionadas, além de buscar exemplos práticos e projetos que utilizem essas técnicas.\n","\n","Deseja realizar o teste final para verificar seu aprendizado? (sim/não): sim\n","\n","==================================================\n","📘 TESTE FINAL - Verificação de Aprendizado\n","\n","==================================================\n","📝 TESTE FINAL - Parte Objetiva (5 questões)\n","\n","Questão 1: Qual das seguintes opções não é um tipo de dado embutido em Python?\n","a) Inteiro\n","b) Float\n","c) String\n","d) Array\n","Sua resposta (a-d): a\n","\n","Questão 2: Qual função é usada para imprimir uma mensagem no console em Python?\n","a) display()\n","b) print()\n","c) console.log()\n","d) write()\n","Sua resposta (a-d): a\n","\n","Questão 3: Qual operador é usado para atribuição em Python?\n","a) ==\n","b) =\n","c) :=\n","d) ===\n","Sua resposta (a-d): a\n","\n","Questão 4: Qual estrutura de controle é usada para executar um bloco de código repetidamente enquanto uma condição é verdadeira?\n","a) if\n","b) for\n","c) while\n","d) switch\n","Sua resposta (a-d): a\n","\n","Questão 5: Qual das seguintes opções é uma forma correta de definir uma função em Python?\n","a) function minha_funcao():\n","b) def minha_funcao():\n","c) void minha_funcao():\n","d) minha_funcao() def:\n","Sua resposta (a-d): a\n","\n","==================================================\n","📝 TESTE FINAL - Parte Dissertativa (2 questões)\n","\n","Pergunta 6: 1. Explique o conceito de listas em Python e forneça exemplos de como criar, acessar e modificar listas.\n","Sua resposta: não sei\n","\n","Pergunta 7: 2. Descreva o que são dicionários em Python e como eles são usados. Compare e contraste dicionários com listas.\n","Sua resposta: também não sei\n","\n","==================================================\n","📊 FEEDBACK COMPLETO\n","\n","● Desempenho nas objetivas: 0/5 (0.0%)\n","\n","⚠️ Atenção aos seguintes conceitos:\n","Aqui estão 3 conceitos importantes de Python que podem precisar de revisão, dependendo do seu nível de experiência:\n","\n","1.  **Compreensões de lista/dicionário:** Essas são formas concisas de criar listas e dicionários em Python. Elas podem tornar seu código mais legível e eficiente, mas podem ser um pouco complicadas no começo.\n","\n","2.  **Decoradores:** Decoradores são uma característica poderosa em Python que permite modificar o comportamento de funções ou classes. Eles são frequentemente usados para adicionar registro, controle de acesso ou outras funcionalidades auxiliares às suas funções.\n","\n","3.  **Geradores:** Geradores são um tipo especial de iterador que permite produzir uma sequência de valores sob demanda. Eles são úteis para trabalhar com grandes conjuntos de dados ou sequências infinitas, pois não precisam armazenar todos os valores na memória ao mesmo tempo.\n","\n","🔍 Análise das respostas dissertativas:\n","\n","Pergunta 6:\n","Com certeza, aqui estão 3 pontos de feedback sobre a resposta \"não sei\" para a pergunta sobre 'phyton':\n","\n","*   **Falta de informação:** A resposta não fornece nenhuma informação útil sobre o tópico \"phyton\". Um usuário que faz uma pergunta espera receber alguma informação ou direção.\n","*   **Falta de tentativas:** A resposta não demonstra nenhuma tentativa de encontrar ou fornecer uma resposta. Mesmo que a resposta exata não seja conhecida, o modelo poderia tentar oferecer informações gerais sobre o assunto ou sugerir recursos para aprender mais.\n","*   **Tom passivo:** A resposta \"não sei\" pode parecer passiva. O modelo poderia ser mais proativo, oferecendo alternativas ou sugestões para ajudar o usuário a encontrar a informação que procura.\n","\n","Em resumo, a resposta \"não sei\" é uma resposta válida, mas não é uma resposta ideal. O modelo poderia ser mais útil, informativo e proativo.\n","\n","Pergunta 7:\n","Okay, here's some feedback on the response \"I don't know\" in the context of a question about \"phyton\" (assuming it's a misspelling of \"Python\"):\n","\n","*   **Lack of helpfulness:** The response provides no information or assistance to the user. It simply states a lack of knowledge.\n","*   **Missed opportunity:** Even without knowing the specific answer, the response could have been more helpful by suggesting resources for the user to learn about Python (e.g., suggesting a tutorial, documentation, or search engine).\n","*   **Absence of clarification:** The response doesn't address the misspelling. A better response might have been, \"I'm not sure what you mean by 'phyton'. Did you perhaps mean 'Python'?\" before stating a lack of knowledge or offering assistance.\n","\n","\n","==================================================\n","💬 Modo de Dúvidas (digite 'sair' para encerrar)\n"]}]}]}